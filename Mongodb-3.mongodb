// MongoDB Playground
// To disable this template go to Settings | MongoDB | Use Default Template For Playground.
// Make sure you are connected to enable completions and to be able to run a playground.
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

// Select the database to use.
use('mongodbVSCodePlaygroundDB');

// The drop() command destroys all data from a collection.
// Make sure you run it against the correct database and collection.
db.sales.drop();

use('restaurants')

db.addresses.find({})

use('restaurants')

db.addresses.find({},{restaurant_id: 1, name: 1, borough: 1, cuisine: 1})


use('restaurants')

db.addresses.find({},{restaurant_id: 1, name: 1, borough: 1, cuisine: 1, _id: 0})


use('restaurants')

db.addresses.find({},{restaurant_id: 1, name: 1, borough: 1, cuisine: 1, "address.zipcode" : 1, _id: 0})


use('restaurants')

db.addresses.find({borough: "Bronx"}).limit(5)

use('restaurants')

db.addresses.find({borough: "Bronx"})

use('restaurants')

db.addresses.find({borough: "Bronx"}).skip(5).limit(5)


use('restaurants')

db.addresses.find({"grades.score" : {$gt: 90}})



use('restaurants')

db.addresses.find({"grades":{$elemMatch:{score:{$gt:80, $lt:100}}}})



use('restaurants')
db.addresses.find({"address.coord.0": {$lt: -95.754168}})

use('restaurants')

db.addresses.find({$and: [{"cuisine": {$ne: "American "}}, {"grades":{$elemMatch:{score:{$gt:70}}}}, {"address.coord.0": {$lt: -65.754168}}]})

use('restaurants')

db.addresses.find({$and: [{"cuisine": {$ne: "American "}}, {"grades":{$elemMatch:{score:{$gt:70}}}}, {"address.coord.0": {$lt: -65.754168}}]})

use('restaurants')

db.addresses.find({$and: [{"cuisine": {$ne: "American "}}, {"grades.grade": "A"}, {"borough": {$ne: "Brooklyn"}}]}).sort({cuisine:-1})


use('restaurants')

db.addresses.find({name: {$regex: /^Wil/}},{restaurant_id: 1, name: 1, borough: 1, cuisine: 1})


use('restaurants')

db.addresses.find({name: {$regex: /ces$/}},{restaurant_id: 1, name: 1, borough: 1, cuisine: 1})


use('restaurants')

db.addresses.find({name: {$regex: /Reg/}},{restaurant_id: 1, name: 1, borough: 1, cuisine: 1})


use('restaurants')

db.addresses.find({$and: [{borough: "Bronx"},{$or: [{cuisine:"American "},{cuisine: "Chinese"}]}]})


use('restaurants')

db.addresses.find({$or: [{borough: "Staten Island"}, {borough: "Queens"},{borough: "Bronxor Brooklyn"}]}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1})

use('restaurants')

db.addresses.find({borough:{$not: {$in: ["Staten Island", "Queens", "Bronxor Brooklyn"]}}}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1})

use('restaurants')

db.addresses.find({"grades.score": {$not: {$gt: 10}}}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1})


use('restaurants')

db.addresses.find({$and: [{cuisine: {$not: {$in: ["American ", "Chinese"]}}}, {name: {$regex: /^Wil/}}]}, {restaurant_id: 1, name: 1, borough: 1, cuisine: 1})





use('restaurants')

db.addresses.find({"grades": {$elemMatch: {score: 11, "date": ISODate("2014-08-11T00:00:00Z"), grade: "A"}}}, {restaurant_id: 1, name: 1, grades: 1})



use('restaurants')

db.addresses.find({"grades.1": {"date": ISODate("2014-08-11T00:00:00Z"), "grade": "A", score: 9}}, {restaurant_id: 1, name: 1, grades: 1})


use('restaurants')

db.addresses.find({$and: [{"grades.1.grade":"A"}, {"grades.1.score": 9}, {"grades.1.date": ISODate("2014-08-11T00:00:00Z")}]},{_id:0, restaurant_id:1, name:1, grades:1}).pretty()


// {restaurant_id: 1, name: 1, address: 1}

use('restaurants')



db.addresses.find({$and: [{"address.coord.1": {$gt: 42}}, {"address.coord.1": {$lte: 52}}]}, {restaurant_id: 1, name: 1, address: 1}).pretty()

use('restaurants')

db.addresses.find({},{name:1}).sort({name: -1})


use('restaurants')

db.addresses.find({},{name:1}).sort({name: 1})


use('restaurants')

db.addresses.find({},{cuisine:1, borough:1}).sort({cuisine: 1}).sort({borough:1})


use('restaurants')

db.addresses.find({}).count()

use('restaurants')

db.addresses.count({$or: [{"address.street": {$exists: true}}, {"address.street": {$not: {$eq: null}}}]})


use('restaurants')

db.addresses.find({"address.street": {$regex: /Street/}})



use('restaurants')

db.addresses.find({$and: [{"address.coord.0": {$type: 1}}, {"address.coord.1": {$type: 1}}]}).pretty()



use('restaurants')

db.addresses.find({"grades": {$elemMatch: {score: {$mod: [7,0]}}}},{restaurant_id: 1, name: 1, grade: 1}).pretty()


use('restaurants')

db.addresses.find({name: {$regex: /mon/}},{restaurant_id: 1, "address.coord": 1, borough: 1, cuisine: 1})


use('restaurants')

db.addresses.find({name: {$regex: /^Mad/}},{restaurant_id: 1, "address.coord": 1, borough: 1, cuisine: 1, name:1})









// Insert a few documents into the sales collection.
db.sales.insertMany([
  { '_id': 1, 'item': 'abc', 'price': 10, 'quantity': 2, 'date': new Date('2014-03-01T08:00:00Z') },
  { '_id': 2, 'item': 'jkl', 'price': 20, 'quantity': 1, 'date': new Date('2014-03-01T09:00:00Z') },
  { '_id': 3, 'item': 'xyz', 'price': 5, 'quantity': 10, 'date': new Date('2014-03-15T09:00:00Z') },
  { '_id': 4, 'item': 'xyz', 'price': 5, 'quantity':  20, 'date': new Date('2014-04-04T11:21:39.736Z') },
  { '_id': 5, 'item': 'abc', 'price': 10, 'quantity': 10, 'date': new Date('2014-04-04T21:23:13.331Z') },
  { '_id': 6, 'item': 'def', 'price': 7.5, 'quantity': 5, 'date': new Date('2015-06-04T05:08:13Z') },
  { '_id': 7, 'item': 'def', 'price': 7.5, 'quantity': 10, 'date': new Date('2015-09-10T08:43:00Z') },
  { '_id': 8, 'item': 'abc', 'price': 10, 'quantity': 5, 'date': new Date('2016-02-06T20:20:13Z') },
]);

// Run a find command to view items sold on April 4th, 2014.
db.sales.find({ date: { $gte: new Date('2014-04-04'), $lt: new Date('2014-04-05') } });

// Build an aggregation to view total sales for each product in 2014.
const aggregation = [
  { $match: { date: { $gte: new Date('2014-01-01'), $lt: new Date('2015-01-01') } } },
  { $group: { _id: '$item', totalSaleAmount: { $sum: { $multiply: [ '$price', '$quantity' ] } } } }
];

// Run the aggregation and open a cursor to the results.
// Use toArray() to exhaust the cursor to return the whole result set.
// You can use hasNext()/next() to iterate through the cursor page by page.
db.sales.aggregate(aggregation);
